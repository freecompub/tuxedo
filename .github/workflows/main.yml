name: Build

on:
  # When it will be triggered
  # And in which branch
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build, Lint and Test

    # runs-on: ubuntu-latest
    runs-on: macos-latest

    steps:
      ## Checkout and prepare repository ###
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Set up our JDK environment
        uses: actions/setup-java@v2.1.0
        with:
          distribution: 'adopt'
          java-version: '8'

      # Step 2: Decode Google services configuration file
      # - name: Decode google-services.json
      #  env:
      #    FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
      #  run: echo $FIREBASE_CONFIG > app/google-services.json

      # Step 3: Check the code with ktlint, you can remove this job if you don't use ktlint
      # - name: Run Kotlin Linter
      #   run: ./gradlew ktlintDebugCheck

      # Step 3: Check the code with Android linter
      - name: Run Android Linter
        run: ./gradlew lintDebug

      # Step 4: Yun your unit tests
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      # Step 4: Assemble debug apk to send to firebase test lab
      - name: Assemble Debug APK
        run: ./gradlew assembleDebug

      # Step 4: Assemble debug test apk to send to firebase test lab
      - name: Assemble Debug Test APK
        run: ./gradlew assembleDebugAndroidTest

      # Step 5: Run emulator
      - name: Go
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 23
          target: default
          arch: x86
          profile: Nexus 6
          script: ./gradlew connectedCheck --stacktrace

      # Step 6: Generate report
      - name: Generate report
        run: ./gradlew jacocoTestReport

      # Step 7: Upload report
      - name: Upload Reports
        uses: actions/upload-artifact@v2.2.4
        with:
          name: reports
          path: app/build/reports

      - name: Upload coverage to Codecov
        run: |
          curl -Os https://uploader.codecov.io/latest/macos/codecov
          chmod +x codecov
          ./codecov

  generate-apk:
    name: Generate apk
    runs-on: ubuntu-latest
    needs:
      - build-and-test
    steps:
      ## Checkout and prepare repository ###
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Set up our JDK environment
        uses: actions/setup-java@v2.1.0
        with:
          distribution: 'adopt'
          java-version: '8'

      - name: Generate apk
        run: ./gradlew assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v1
        with:
          name: build-output
          path: app/build/outputs/apk/debug/app-debug.apk

  api-level-test:
    name: Test app in api Min and Max
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [23, 28, 29]
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck
